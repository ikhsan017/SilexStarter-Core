<?php
namespace {{namespace}};

use Exception;
use SilexStarter\StaticProxy\Request;
use SilexStarter\StaticProxy\Response;
use {{repo_interface_fqcn}};

class {{controller_class}}
{
    protected ${{repo_prop}};

    /**
     * Constructing the controller.
     *
     * @param {{repository_interface}} ${{repo_prop}}  The repository object
     */
    public function __construct({{repository_interface}} ${{repo_prop}})
    {
        $this->{{repo_prop}} = ${{repo_prop}};
    }



    /**
     * Show all available resources.
     */
    public function index($page = 1)
    {
        $perPage    = 10;
        $count      = $this->{{repo_prop}}->count();
        $entities   = $this->{{repo_prop}}->findAllByPage($page, $perPage)->map(
            function ($entity) {
                return $entity->toArray();
            }
        );

        return Response::json(
            [
                '{{entity_plural}}' => $entities,
                'meta'      => [
                    'page'      => $page,
                    'per_page'  => $perPage,
                    'count'     => $count,
                ],
                'links'     => [
                    'next'      => $count == 0 || ceil($count/$perPage) == $page ? null : Url::to('{{route_name}}.paged_index', ['page' => $page+1]),
                    'previous'  => $page == 1 ? null : Url::to('{{route_name}}.paged_index', ['page' => $page-1]),
                    'current'   => Url::to('{{route_name}}.paged_index', ['page' => $page]),
                ]
            ]
        );
    }

    /**
     * Show single resource with specific id.
     */
    public function show($id)
    {
        $entity = $this->{{repo_prop}}->findById($id);

        return Response::json($entity->toArray());
    }

    /**
     * Create new resource in database.
     */
    public function store()
    {
        $data = Request::json();

        try {
            $entity = $this->{{repo_prop}}->entityFactory($data);

            $this->{{repo_prop}}->save($entity);

            return Response::json(
                [
                    'message'   => 'New {{entity|replace({'_' : ' '})}} has been created!',
                    '{{entity}}'=> $entity->toArray()
                ],
                201
            );
        } catch (Exception $e) {
            return Response::json(
                [
                    'message'   => 'Error occured while creating {{entity|replace({'_' : ' '})}}!',
                    '{{entity}}'=> $entity,
                    'error'     => [
                        'message'   => $e->getMessage(),
                        'code'      => $e->getCode()
                    ]
                ],
                500
            );
        }
    }

    /**
     * Update existing resource in the database.
     */
    public function update($id)
    {
        $data = Request::json();

        try {
            $entity = $this->{{repo_prop}}->findById($id);

            {% for field in fields %}$entity->set{{field.name_studly}}($data['{{field.name}}']);
            {% endfor %}

            $this->{{repo_prop}}->save($entity);

            return Response::json(
                [
                    'message'   => '{{entity|replace({'_' : ' '})|capitalize}} has been updated!',
                    '{{entity}}'=> $entity->toArray()
                ],
                200
            );
        } catch (Exception $e) {
            return Response::json(
                [
                    'message'   => 'Error occured while updating {{entity|replace({'_' : ' '})}}!',
                    '{{entity}}'=> $data,
                    'error'     => [
                        'message'   => $e->getMessage(),
                        'code'      => $e->getCode()
                    ]
                ],
                500
            );
        }
    }

    /**
     * Remove specified resource in database.
     */
    public function delete($id)
    {
        $entity = $this->{{repo_prop}}->entityFactory(['id' => $id]);

        try {
            $this->{{repo_prop}}->delete($entity);

            return Response::json(['message' => '{{entity|replace({'_' : ' '})|capitalize}} has been deleted!'], 200);
        } catch (Exception $e) {
            return Response::json(
                [
                    'message'   => 'Error occured while deleting {{entity|replace({'_' : ' '})}}!',
                    '{{entity}}'=> $entity,
                    'error'     => [
                        'message'   => $e->getMessage(),
                        'code'      => $e->getCode()
                    ]
                ],
                500
            );
        }
    }
}
