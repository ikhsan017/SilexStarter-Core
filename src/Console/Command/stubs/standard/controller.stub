<?php
namespace {{namespace}};

use Exception;
use SilexStarter\StaticProxy\View;
use SilexStarter\StaticProxy\Session;
use SilexStarter\StaticProxy\Request;
use SilexStarter\StaticProxy\Response;
use Xsanisty\Datatable\StaticProxy\Datatable;
use {{repo_interface_fqcn}};

class {{controller_class}}
{
    protected ${{repo_prop}};

    /**
     * Constructing the controller.
     *
     * @param {{repository_interface}} ${{repo_prop}}  The repository object
     */
    public function __construct({{repository_interface}} ${{repo_prop}})
    {
        $this->{{repo_prop}} = ${{repo_prop}};
    }

    /**
     * Show all available resources.
     */
    public function index()
    {
        $entities = $this->{{repo_prop}}->findAll();

        return View::make(
            '{{template_path}}/index',
            [
                'entities'      => $entities,
                'status'        => Session::getFlash('status'),
                'message'       => Session::getFlash('message'),
                'title'         => '{{entity|replace({'_' : ' '})|capitalize}} list',
                'page_title'    => '{{entity|replace({'_' : ' '})|capitalize}} list',
                'active_menu'   => {% if module %}'admin_sidebar.{{module}}.{{entity}}'{% else %}'admin_sidebar.{{entity}}'{% endif %}
            ]
        );
    }

    /**
     * Show single resource with specific id.
     */
    public function show($id)
    {
        $entity = $this->{{repo_prop}}->findById($id);

        return View::make('{{template_path}}/show', ['entity' => $entity]);
    }

    /**
     * Display new resource form.
     */
    public function create()
    {
        $data   = Session::getFlash('{{entity}}_data', []);

        return View::make(
            '{{template_path}}/create',
            [
                'action'    => Url::to('{{url_name}}.store'),
                'entity'    => $this->{{repo_prop}}->entityFactory($data),
                'status'    => Session::getFlash('status'),
                'message'   => Session::getFlash('message'),
                'title'     => 'Create {{entity|replace({'_' : ' '})}}',
                'page_title'=> 'Create {{entity|replace({'_' : ' '})}}',
            ]
        );
    }

    /**
     * Create new resource in database.
     */
    public function store()
    {
        $data   = Request::get('{{entity}}_data');
        $entity = $this->{{repo_prop}}->entityFactory($data);

        try {
            $entity = $this->{{repo_prop}}->save($entity);

            Session::flash('status', 'success');
            Session::flash('message', 'New {{entity|replace({'_' : ' '})}} has been created!');

            return Response::redirect(Url::to('{{url_name}}.edit', ['id' => $entity->getId()]));
        } catch (Exception $e) {
            Session::flash('status', 'error');
            Session::flash('message', $e->getMessage());
            Session::flash('{{entity}}_data', $data);

            return Response::redirect(Url::to('{{url_name}}.create'));
        }
    }

    /**
     * Display edit resource form.
     */
    public function edit($id)
    {
        $entity = $this->{{repo_prop}}->findById($id);

        return Response::view(
            '{{template_path}}/edit',
            [
                'action'    => Url::to('{{url_name}}.update', ['id' => $id]),
                'entity'    => $entity,
                'status'    => Session::getFlash('status'),
                'message'   => Session::getFlash('message'),
                'title'     => 'Edit {{entity|replace({'_' : ' '})}}',
                'page_title'=> 'Edit {{entity|replace({'_' : ' '})}}',
            ]
        );
    }

    /**
     * Update existing resource in the database.
     */
    public function update($id)
    {
        try {
            $entity = $this->{{repo_prop}}->findById($id);

            $data   = Request::get('{{entity}}_data');

            {% for field in fields %}$entity->set{{field.name_studly}}($data['{{field.name}}']);
            {% endfor %}

            $entity = $this->{{repo_prop}}->save($entity);

            Session::flash('status', 'success');
            Session::flash('message', '{{entity|replace({'_' : ' '})|capitalize}} has been updated!');
        } catch (Exception $e) {
            Session::flash('status', 'error');
            Session::flash('message', $e->getMessage());
        }

        return Response::redirect(Url::to('{{url_name}}.edit', ['id' => $entity->getId()]));
    }

    /**
     * Remove specified resource in database.
     */
    public function delete($id)
    {
        try {
            $entity = $this->{{repo_prop}}->entityFactory(['id' => $id]);

            $this->{{repo_prop}}->delete($entity);

            Session::flash('status', 'success');
            Session::flash('message', '{{entity|replace({'_' : ' '})|capitalize}} has been deleted!');
            $status = 200;
        } catch (Exception $e) {
            Session::flash('status', 'error');
            Session::flash('message', $e->getMessage());
            $status = 500;
        }

        if (Request::ajax()) {
            return Response::json(
                [
                    'status'    => Session::getFlash('status'),
                    'message'   => Session::getFlash('message'),
                ],
                $status
            );
        }

        return Response::redirect(Url::to('{{url_name}}.index'));
    }
}
